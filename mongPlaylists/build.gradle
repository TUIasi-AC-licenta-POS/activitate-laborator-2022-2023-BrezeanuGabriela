//buildscript {
//	repositories {
//		mavenLocal()
//		maven { url "https://repo1.maven.org/maven2" }
//	}
//	dependencies {
//		classpath "org.openapitools:openapi-generator-gradle-plugin:5.0.0"
//	}
//}
//apply plugin: 'org.openapi.generator'

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id "org.springdoc.openapi-gradle-plugin" version "1.6.0"
	id "org.openapi.generator" version "5.1.1"
}

group = 'pos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.9'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	jaxb
}

//apply plugin: "org.openapi.generator"

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

bootJar {
	baseName = 'gs-consuming-web-service'
	version =  '0.0.1'
}

// tag::wsdl[]
task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "http://127.0.0.1:8000/?wsdl"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema,
					package: "com.example.consumingwebservice.wsdl") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}
// end::wsdl[]

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.json', name: 'json', version: '20090211'
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	implementation 'org.springframework.boot:spring-boot-starter-web-services'
//			{
//		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
//	}
	implementation 'org.springframework.ws:spring-ws-core'
// For Java 11:
	implementation 'org.glassfish.jaxb:jaxb-runtime'
	implementation(files(genJaxb.classesDir).builtBy(genJaxb))
//
	implementation "javax.xml.bind:jaxb-api"
	jaxb "com.sun.xml.bind:jaxb-xjc:2.3.3"

	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	implementation 'io.jsonwebtoken:jjwt:0.2'

//	implementation 'io.swagger.core.v3:swagger-annotations:2.1.11'
//	implementation 'io.springfox:springfox-swagger2:3.0.0'
//	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
//	implementation 'org.springdoc:springdoc-openapi-ui:1.2.33'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

//openApiGenerate {
//	generatorName = "java"
//	inputSpec = "$rootDir/src/main/resources/swagger.yaml"
//	outputDir = "$buildDir/generated".toString()
//	apiPackage = "org.openapi.example.api"
//	invokerPackage = "org.openapi.example.invoker"
//	modelNameSuffix = "Dto"
//	generateApiTests = false
//	generateModelTests = false
//	modelPackage = "org.openapi.example.model"
//	configOptions = [
//			dateLibrary: 'java8',
//			interfaceOnly: 'true',
//			skipDefaultInterface: 'true',
//			useApiIgnore:'fales',
//			swaggerAnnotations: 'true',
//	]
//	globalProperties = [
//			modelDocs: 'false',
//			apis: '',
//			models: ''
//	]
//}

task openApiGenerateJavaClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	inputSpec = "$rootDir/src/main/resources/openapi.json";
	outputDir = "$rootDir/clients/java/"

	generatorName = "java"

	groupId = group

	apiPackage = "bike.rapido.ingestion.gateway.client.api"
	invokerPackage = "bike.rapido.ingestion.gateway.client.invoker"
	modelPackage = "bike.rapido.ingestion.gateway.client.model"

	configOptions = [
			library        : "feign",
			dateLibrary    : "java8",
			artifactId     : "ingestion-gateway-client",
			artifactVersion: project.version.toString(),
	]
}

openApiGenerate {
	generatorName = "typescript-axios"
	inputSpec = "$rootDir/src/main/resources/openapi.json";
	outputDir = "${buildDir}/frontend/src/app/client"
}





